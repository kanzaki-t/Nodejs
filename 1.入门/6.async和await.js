/*
    通过async可以快随的创建异步函数
        异步函数的返回值会自动封装到一个Promise中返回

    在async声明的函数中，可以使用await关键字

    Promise解决了异步调用中回调函数的问题，
        虽然通过链式调用解决了回调地狱，但是链式调用太多以后还是不好看
        我多想以同步的方式取调用异步的代码

    当我们通过await去调用异步函数时，
        他会暂停代码的运行
    直到异步代码执行有结果时，才会将结果返回
    注意：
        await只能用于 async声明的异步函数中，或es模块的顶级作用域中
    await阻塞的只是异步函数中的代码，不会影响外部代码

    通过await调用异步代码时，需要通过try-catch来处理异常

    如果async声明的函数中没有写await，那么它里面的代码就会依次执行

    如果await 调用的不是异步代码，
        当前函数后边的所有代码会在当前函数执行完毕后，被放入到微任务队列中

*/

// 如果await 调用的不是异步代码，
// 当前函数后边的所有代码会在当前函数执行完毕后，被放入到微任务队列中
// 下述代码的执行顺序是，1-2-3-5-4
async function fn1() {
    console.log(1);
    console.log(2);
    await console.log(3);
    console.log(4);
}

fn1()

console.log(5);