/*
    进程和线程
        - 进程
            - 程序的运行的环境
        - 线程
            - 实际进行运算的东西
    
    同步
        - 通常情况，代码都是自上向下一行一行执行的
        - 前边的代码不执行，后边的代码也不会执行
        - 同步的代码执行会出现阻塞的情况
        - 现实生活：
            1.点菜
            2.厨师做菜
            3.吃
        - 一行代码执行慢，会影响到整个程序的执行
    
    解决同步的问题：
        - java
            - 通过多线程来解决
        - node.js
            - 通过异步方式来解决

    异步
        - 一段代码的执行不会影响到其他的程序
        - 异步的问题：
            异步的代码无法通过return来设置返回值
        - 特点：
            1.不会阻塞其他代码的执行
            2.需要通过回调函数来返回结果
        - 基于回调函数的异步带来的问题
            1.代码的可读性差
            2.代码的可调式性差
        
        - 解决问题：
            - 需要一个东西，可以代替回调函数来给我们返回结果
            - Promise
                - 是一个可以用来存储数据的对象
                    存储数据的方式比较特殊，
                    这种特殊方式使得Promise可以用来存储异步调用的数据
 */

function sum(a,b,callback) {
    setTimeout(() => {
        callback(a+b)
    }, 5000);
}

console.log("aaa");

sum(123,456,(res) => {
    console.log(res);
})


console.log("bbb");